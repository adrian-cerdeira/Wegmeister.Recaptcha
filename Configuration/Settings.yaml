Neos:
  Form:
    presets:
      default:
        formElementTypes:
          'Wegmeister.Recaptcha:Captcha':
            superTypes:
              - 'Neos.Form:FormElement'
            renderingOptions:
              templatePathPattern: 'resource://Wegmeister.Recaptcha/Private/Form/Captcha.html'
              includeAPIScript: true
              includeClosestPolyfill: true
              validationErrorTranslationPackage: Wegmeister.Recaptcha
          'Wegmeister.Recaptcha:CaptchaV2':
            superTypes:
              - 'Wegmeister.Recaptcha:Captcha'
            implementationClassName: Wegmeister\Recaptcha\FormElements\Recaptcha
          'Wegmeister.Recaptcha:CaptchaV3':
            superTypes:
              - 'Wegmeister.Recaptcha:Captcha'
            renderingOptions:
              templatePathPattern: 'resource://Wegmeister.Recaptcha/Private/Form/CaptchaV3.html'
            implementationClassName: Wegmeister\Recaptcha\FormElements\Recaptcha
        validatorPresets:
          'Wegmeister.Recaptcha:IsValid':
            implementationClassName: Wegmeister\Recaptcha\Validation\Validator\IsValidValidator
  Neos:
    fusion:
      autoInclude:
        'Wegmeister.Recaptcha': true
    userInterface:
      translation:
        autoInclude:
          'Wegmeister.Recaptcha':
            - 'NodeTypes/*'

Wegmeister:
  Recaptcha:
    # Available request methods: file_get_contents, curl, socket,
    # or you can provide a FQCN that implements ReCaptcha\RequestMethod.
    # If an invalid request method is applied, file_get_contents will be used.
    requestMethod: 'file_get_contents'
    # The following option will be used, if requestMethod is 'Wegmeister\Recaptcha\RequestMethod\CurlPostWithProxy'
    httpProxy: ''
